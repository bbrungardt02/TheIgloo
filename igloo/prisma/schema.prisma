// schema.prisma

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  orders        Order[]
  accounts      Account[]
  sessions      Session[]
  isAdmin       Boolean   @default(false)
  isGuest       Boolean   @default(false)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  product_id     Int       @id @default(autoincrement()) @map("product_id")
  name           String
  description    String
  price          Float
  image_url      String
  stock_quantity Int
  subcategory_id Int
  created_at     DateTime   @default(now())
  subcategory    Subcategory @relation(fields: [subcategory_id], references: [subcategory_id])
  category_id    Int       @map("category_id")
  category       Category  @relation(fields: [category_id], references: [category_id])
  order_items    OrderItem[]
}

model Subcategory {
  subcategory_id Int       @id @default(autoincrement()) @map("subcategory_id")
  name           String
  products       Product[]
}

model Category {
  category_id Int       @id @default(autoincrement()) @map("category_id")
  name        String
  products    Product[]
}

model Order {
  order_id     Int       @id @default(autoincrement()) @map("order_id")
  order_status String    @default("pending")
  order_date   DateTime
  total_amount Float
  created_at   DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  order_items  OrderItem[]
}

model OrderItem {
  order_item_id Int       @id @default(autoincrement()) @map("order_item_id")
  order_id      Int
  product_id    Int
  quantity      Int
  subtotal      Float
  order         Order     @relation(fields: [order_id], references: [order_id])
  product       Product   @relation(fields: [product_id], references: [product_id])
}